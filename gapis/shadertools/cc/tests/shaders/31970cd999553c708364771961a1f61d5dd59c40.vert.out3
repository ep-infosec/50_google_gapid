Vertex mode
compiled
linked
label 5
action type: 1, words:  212,  213,  0,  1, 
action type: 1, words:  215,  216,  0,  1, 
action type: 1, words:  218,  219,  0,  1, 
action type: 1, words:  221,  222,  0,  1, 
action type: 1, words:  224,  225,  0,  1, 
action type: 1, words:  227,  228,  0,  1, 
action type: 1, words:  230,  231,  0,  1, 
action type: 0, words:  56, 
action type: 1, words:  82,  25,  0,  1, 
action type: 0, words:  57, 
action type: 1, words:  86,  25,  0,  1, 
action type: 0, words:  59, 
action type: 1, words:  90,  25,  0,  1, 
action type: 0, words:  62, 
action type: 1, words:  103,  102,  1,  1, 
action type: 0, words:  67, 
action type: 1, words:  112,  13,  0,  1, 
action type: 0, words:  69, 
action type: 1, words:  116,  110,  0,  1, 
action type: 0, words:  70, 
action type: 1, words:  116,  110,  0,  1, 
action type: 0, words:  73, 
action type: 1, words:  124,  123,  0,  1, 
action type: 0, words:  77, 
action type: 1, words:  135,  13,  0,  1, 
action type: 0, words:  78, 
action type: 1, words:  138,  123,  0,  1, 
action type: 0, words:  80, 
action type: 1, words:  149,  19,  0,  1, 
action type: 0, words:  81, 
action type: 1, words:  155,  19,  0,  1, 
action type: 0, words:  82, 
action type: 1, words:  158,  110,  0,  1, 
action type: 0, words:  83, 
action type: 1, words:  160,  7,  0,  1, 
action type: 0, words:  84, 
action type: 1, words:  166,  7,  0,  1, 
action type: 0, words:  85, 
action type: 1, words:  181,  110,  0,  1, 
action type: 0, words:  86, 
action type: 1, words:  181,  110,  1,  1, 
label 11
action type: 0, words:  4, 
label 17
action type: 0, words:  8, 
label 23
action type: 0, words:  12, 
label 29
action type: 0, words:  16, 
label 32
action type: 0, words:  20, 
label 35
action type: 0, words:  24, 
label 38
action type: 0, words:  49, 
action type: 1, words:  68,  7,  0,  1, 
action type: 0, words:  50, 
Decompiled:
#version 330
#ifdef GL_ARB_shading_language_420pack
#extension GL_ARB_shading_language_420pack : require
#endif

uniform mat4 xLocalToWorld;
uniform mat4 xLocalToProjection;
uniform vec4 xLightmapCoordinateScaleBias;
uniform mat3 xTextureTransform;
uniform vec4 xFogColor;
uniform float xFogStartSquared;
uniform float xFogOneOverSquaredRange;
uniform vec4 xFadeColorAndAmount;
uniform mat3 xLocalToWorldRotation;
uniform mat4 xViewProjection;
uniform usampler2D gapid_sampler;

in vec4 xPosition;
in vec4 xVertexColor;
in vec2 xTexCoords1;
out vec4 xUVBase;
out vec2 xUVLightmap;
in vec2 xLightMapCoordinate;
in vec2 xTexCoords0;
out vec2 xUVDetail;
out vec4 xTextureBlendFactor;
out vec4 xGlobalEffectColorAndAmount;
out vec4 x_oVertexColor;
out vec4 x_oPosition;
out int x_ogl_VertexID;
out vec2 x_oLightMapCoordinate;
out int x_ogl_InstanceID;
out vec2 x_oTexCoords1;
out vec2 x_oTexCoords0;
out uvec4 gapid_result;
in vec2 gapid_coor;
uint gapid_curr_step;

void print(uvec4 value)
{
    gapid_curr_step = (gapid_curr_step - 1u);
    if ((gapid_curr_step == 0u))
    {
        gapid_result = value;
    }
}

void label(uint value)
{
    print(uvec4(value, 0u, 0u, 0u));
}

void print(vec4 value)
{
    print(uvec4(floatBitsToUint(value.x), floatBitsToUint(value.y), floatBitsToUint(value.z), floatBitsToUint(value.w)));
}

void print(uint value)
{
    print(uvec4(value, 0u, 0u, 0u));
}

void print(int value)
{
    print(uint(value));
}

void print(vec2 value)
{
    print(uvec4(floatBitsToUint(value.x), floatBitsToUint(value.y), 0u, 0u));
}

void print(vec3 value)
{
    print(uvec4(floatBitsToUint(value.x), floatBitsToUint(value.y), floatBitsToUint(value.z), 0u));
}

void print(float value)
{
    print(floatBitsToUint(value));
}

void main()
{
    gapid_curr_step = texture(gapid_sampler, gapid_coor).x;
    label(5u);
    x_oVertexColor = xVertexColor;
    print(x_oVertexColor);
    x_oPosition = xPosition;
    print(x_oPosition);
    x_ogl_VertexID = gl_VertexID;
    print(x_ogl_VertexID);
    x_oLightMapCoordinate = xLightMapCoordinate;
    print(x_oLightMapCoordinate);
    x_ogl_InstanceID = gl_InstanceID;
    print(x_ogl_InstanceID);
    x_oTexCoords1 = xTexCoords1;
    print(x_oTexCoords1);
    x_oTexCoords0 = xTexCoords0;
    print(x_oTexCoords0);
    vec4 xInputPosition = xPosition;
    print(xInputPosition);
    vec4 xVertexColorRGBA = xVertexColor.zyxw;
    print(xVertexColorRGBA);
    vec4 xWorldPosition = (xLocalToWorld * xInputPosition);
    print(xWorldPosition);
    gl_Position = (xInputPosition * xLocalToProjection);
    gl_Position.z = 2.0 * gl_Position.z - gl_Position.w;
    print(0);
    print(gl_Position);
    vec2 xBaseTexCoords = xTexCoords1;
    print(xBaseTexCoords);
    xUVBase = vec4(xBaseTexCoords.x, xBaseTexCoords.y, xUVBase.z, xUVBase.w);
    print(xUVBase);
    xUVBase = vec4(xUVBase.x, xUVBase.y, xBaseTexCoords.x, xBaseTexCoords.y);
    print(xUVBase);
    xUVLightmap = ((xLightMapCoordinate * xLightmapCoordinateScaleBias.xy) + xLightmapCoordinateScaleBias.wz);
    print(xUVLightmap);
    vec2 xDetailTexCoords = xTexCoords0;
    print(xDetailTexCoords);
    xUVDetail = (xTextureTransform * vec3(xDetailTexCoords, 1.0)).xy;
    print(xUVDetail);
    vec3 xEyeToVertexVector = (vec3(0.0) - xWorldPosition.xyz);
    print(xEyeToVertexVector);
    vec3 xEyeToVertexDirection = normalize(xEyeToVertexVector);
    print(xEyeToVertexDirection);
    xTextureBlendFactor = xVertexColorRGBA;
    print(xTextureBlendFactor);
    float xVertDistSquared = dot(xWorldPosition.xyz, xWorldPosition.xyz);
    print(xVertDistSquared);
    float xFogColorAmount = (xFogColor.w * clamp(((xVertDistSquared - xFogStartSquared) * xFogOneOverSquaredRange), 0.0, 1.0));
    print(xFogColorAmount);
    vec3 _192 = mix((xFogColor.xyz * xFogColorAmount), xFadeColorAndAmount.xyz, vec3(xFadeColorAndAmount.w));
    xGlobalEffectColorAndAmount = vec4(_192.x, _192.y, _192.z, xGlobalEffectColorAndAmount.w);
    print(xGlobalEffectColorAndAmount);
    xGlobalEffectColorAndAmount.w = (1.0 - ((xFogColorAmount + xFadeColorAndAmount.w) - (xFogColorAmount * xFadeColorAndAmount.w)));
    print(3u);
    print(xGlobalEffectColorAndAmount.w);
}


spirv-cross OK
