Vertex mode
compiled
linked
label 5
action type: 1, words:  74,  75,  0,  1, 
action type: 1, words:  77,  78,  0,  1, 
action type: 1, words:  80,  81,  0,  1, 
action type: 1, words:  83,  84,  0,  1, 
action type: 1, words:  86,  87,  0,  1, 
action type: 1, words:  89,  90,  0,  1, 
action type: 0, words:  81, 
action type: 1, words:  10,  9,  0,  1, 
action type: 0, words:  82, 
action type: 1, words:  10,  9,  1,  1, 
action type: 0, words:  87, 
action type: 1, words:  32,  9,  0,  1, 
action type: 0, words:  88, 
action type: 1, words:  32,  9,  0,  1, 
action type: 0, words:  90, 
action type: 1, words:  44,  43,  0,  1, 
action type: 0, words:  92, 
action type: 1, words:  48,  47,  0,  1, 
action type: 0, words:  93, 
action type: 1, words:  52,  47,  0,  1, 
action type: 0, words:  94, 
action type: 1, words:  55,  43,  0,  1, 
Decompiled:
#version 330
#ifdef GL_ARB_shading_language_420pack
#extension GL_ARB_shading_language_420pack : require
#endif

uniform vec4 xCHUNK_ORIGIN_AND_SCALE;
uniform mat4 xWORLDVIEW;
uniform mat4 xPROJ;
uniform vec4 xFOG_COLOR;
uniform vec2 xFOG_CONTROL;
uniform float xRENDER_DISTANCE;
uniform vec2 xVIEWPORT_DIMENSION;
uniform vec4 xCURRENT_COLOR;
uniform vec3 xVIEW_POS;
uniform float xFAR_CHUNKS_DISTANCE;
uniform usampler2D gapid_sampler;

in vec4 xPOSITION;
out vec2 xuv0;
in vec2 xTEXCOORD_0;
out vec2 xuv1;
in vec2 xTEXCOORD_1;
out vec4 xcolor;
in vec4 xCOLOR;
out int x_ogl_InstanceID;
out vec4 x_oPOSITION;
out vec2 x_oTEXCOORD_0;
out vec4 x_oCOLOR;
out vec2 x_oTEXCOORD_1;
out int x_ogl_VertexID;
out uvec4 gapid_result;
in vec2 gapid_coor;
uint gapid_curr_step;

void print(uvec4 value)
{
    gapid_curr_step = (gapid_curr_step - 1u);
    if ((gapid_curr_step == 0u))
    {
        gapid_result = value;
    }
}

void label(uint value)
{
    print(uvec4(value, 0u, 0u, 0u));
}

void print(uint value)
{
    print(uvec4(value, 0u, 0u, 0u));
}

void print(int value)
{
    print(uint(value));
}

void print(vec4 value)
{
    print(uvec4(floatBitsToUint(value.x), floatBitsToUint(value.y), floatBitsToUint(value.z), floatBitsToUint(value.w)));
}

void print(vec2 value)
{
    print(uvec4(floatBitsToUint(value.x), floatBitsToUint(value.y), 0u, 0u));
}

void print(float value)
{
    print(floatBitsToUint(value));
}

void main()
{
    gapid_curr_step = texture(gapid_sampler, gapid_coor).x;
    label(5u);
    x_ogl_InstanceID = gl_InstanceID;
    print(x_ogl_InstanceID);
    x_oPOSITION = xPOSITION;
    print(x_oPOSITION);
    x_oTEXCOORD_0 = xTEXCOORD_0;
    print(x_oTEXCOORD_0);
    x_oCOLOR = xCOLOR;
    print(x_oCOLOR);
    x_oTEXCOORD_1 = xTEXCOORD_1;
    print(x_oTEXCOORD_1);
    x_ogl_VertexID = gl_VertexID;
    print(x_ogl_VertexID);
    vec3 _26 = (xPOSITION.xyz * xCHUNK_ORIGIN_AND_SCALE.w) + xCHUNK_ORIGIN_AND_SCALE.xyz;
    vec4 xworldPos;
    xworldPos = vec4(_26.x, _26.y, _26.z, xworldPos.w);
    print(xworldPos);
    xworldPos.w = 1.0;
    print(3u);
    print(xworldPos.w);
    vec4 xpos = (xWORLDVIEW * xworldPos);
    print(xpos);
    xpos = (xPROJ * xpos);
    print(xpos);
    gl_Position = xpos;
    gl_Position.z = 2.0 * gl_Position.z - gl_Position.w;
    print(gl_Position);
    xuv0 = xTEXCOORD_0;
    print(xuv0);
    xuv1 = xTEXCOORD_1;
    print(xuv1);
    xcolor = xCOLOR;
    print(xcolor);
}


spirv-cross OK
